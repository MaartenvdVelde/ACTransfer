// Which acquarium has more fish?
//

define task more-fish {
    initial-goals: (find-most say-answer)
    goals: (countgoal)
    task-constants: (fish red acquarium)
    imaginal-autoclear: nil
    start-screen: start
    rt: -2.0
    lf: 0.3
    ans: 0.1
    default-activation: 1.0
}

define facts {
    (cf0 count-fact zero one)
    (cf1 count-fact  one  two)
    (cf2 count-fact  two  three)
    (cf3  count-fact  three  four)
    (cf4  count-fact  four  five)
    (cf5  count-fact  five  six)
    (gt1 greaterthan three zero yes)
}

define goal find-most {
    operator init-find-most {
        WM1=nil
        V1=acquarium
        ==>
        V2->WM2
        zero->WM3
        focusdown->AC1
        countgoal->G3
    }

    operator count-done-check-if-more {
        RT1=nil
        V1=fish
        V2=error
        ==>
        greaterthan->RT1
        WM1->RT2
        WM3->RT3
    }

    operator find-most-new-count-is-more {
        V1=fish
        V2=error
        RT4=yes
        ==>
        WM1->WM3
        WM2->WM4
        focusup->AC1
    }

    operator find-most-new-count-is-not-more {
        V1=fish
        V2=error
        RT1=error
        ==>
        focusup->AC1
    }

    operator find-most-next-container {
        WM3<>nil
        V1=acquarium
        V2<>error
        ==>
        V2->WM2
        countgoal->G3
        zero->WM1
        focusdown->AC1
    }

    operator find-most-all-done {
        V1=acquarium
        V2=error
        ==>
        done->WM2
        nil->G1
        WM4->WM1
    }
}

define goal countgoal {
    operator init-countgoal {
        WM1=nil
        ==>
        zero->WM1
    }

    operator countgoal-retrieve {
        V1=fish
        V2=red
        RT1=nil
        ==>
        WM1->RT2
        count-fact->RT1
    }

    operator countgoal-add-count {
        V1=fish
        V2=red
        ==>
        RT3->WM1
        focusnext->AC1
    }

    operator countgoal-ignore-non-targets {
        V1=fish
        V2<>red
        ==>
        focusnext->AC1
    }

    operator countgoal-done {
        V2=error
        ==>
        nil->G3
        }
}

define goal say-answer {
    operator report-answer {
        WM2=done
        ==>
        say->AC1
        WM1->AC2
        stop->G1
    }
}

define screen start {

   ( acquarium left
     ( fish red)
     ( fish blue)
     ( fish red)
     ( fish red)
)
( acquarium right
( fish red)
( fish blue)
( fish green)
( fish red)
)
}

define goal-action {
(say left)
}



