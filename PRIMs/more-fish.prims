define task more-fish {
initial-goals: (find-most say-answer)
goals: (countgoal)
task-constants: (fish red acquarium)
imaginal-autoclear: nil
start-screen: start
rt: -2.0
lf: 0.3
ans: 0.1
}

define facts {
(cf0 countfact zero one :activation 1.0)
(cf1 countfact  one  two :activation 1.0)
(cf2 countfact  two  three :activation 1.0)
(cf3  countfact  three  four :activation 1.0)
(cf4  countfact  four  five :activation 1.0)
(cf5  countfact  five  six :activation 1.0)
(gt1 greaterthan three zero yes :activation 1.0)
}

define goal find-most {
operator init-find-most(activation=1.0) {
WM1=nil
V1=acquarium
==>
V2->WM2
zero->WM3
focusdown->AC1
countgoal->G3
}

operator count-done-check-if-more(activation=1.0) {
RT1=nil
V1=acquarium
V2=error
==>
greaterthan->RT1
WM1->RT2
WM3->RT3
}

operator find-most-new-count-is-more(activation=1.0) {
V1=acquarium
V2=error
RT4=yes
==>
WM1->WM3
WM2->WM4
focusup->AC1
}

operator find-most-new-count-is-not-more(activation=1.0) {
V1=acquarium
V2=error
RT1=error
==>
focusup->AC1
}

operator find-most-next-container(activation=1.0) {
WM3<>nil
V1=acquarium
V2<>error
==>
V2->WM2
countgoal->G3
zero->WM1
focusdown->AC1
}

operator find-most-all-done(activation=1.0) {
V1=card
V2=error
==>
done->WM2
nil->G1
WM4->WM1
}
}

define goal countgoal {
operator init-countgoal(activation=1.0) {
WM1=nil
==>
zero->WM1
}

operator countgoal-retrieve(activation=1.0) {
V1=fish
V2=red
RT1=nil
==>
WM1->RT2
countfact->RT1
}

operator countgoal-add-count(activation=1.0) {
V1=fish
V2=red
==>
RT3->WM1
focusnext->AC1
}

operator countgoal-ignore-non-targets(activation=1.0) {
V1=fish
V2<>red
==>
focusnext->AC1
}

operator countgoal-done(activation=1.0) {
V2=error
==>
nil->G3
}
}

define goal say-answer {
operator report-answer(activation=1.0) {
WM2=done
==>
say->AC1
WM1->AC2
stop->G1
}
}

define screen start {

   ( acquarium left
     ( fish red)
     ( fish blue)
     ( fish red)
     ( fish red)
)
( acquarium right
( fish red)
( fish blue)
( fish green)
( fish red)
)

}


