define task count-spoons {
initial-goals: (count-all say-answer)
task-constants: (item spoon placemat)
imaginal-autoclear: nil
rt: -2.0
lf: 0.3
ans: 0.1
}

define facts {
(cf0 countfact zero one :activation 1.0)
(cf1 countfact  one  two :activation 1.0)
(cf2 countfact  two  three :activation 1.0)
(cf3  countfact  three  four :activation 1.0)
(cf4  countfact  four  five :activation 1.0)
(cf5  countfact  five  six :activation 1.0)
}

define goal count-all {
operator init-count-all(activation=1.0) {
WM1=nil
V1=placemat
==>
focusdown->AC1
countgoal->G3
}

operator count-all-next-container(activation=1.0) {
V1=placemat
V2=error
==>
focusup->AC1
}

operator count-all-focus-down-next-container(activation=1.0) {
WM1<>nil
V1=placemat
V2<>error
==>
focusdown->AC1
countgoal->G3
}

operator count-all-done(activation=1.0) {
V1=card
V2=error
==>
done->WM2
nil->G1
}
}

define goal countgoal {
operator init-countgoal(activation=1.0) {
WM1=nil
==>
zero->WM1
}

operator countgoal-retrieve(activation=1.0) {
V1=item
V2=spoon
RT1=nil
==>
WM1->RT2
countfact->RT1
}

operator countgoal-add-count(activation=1.0) {
V1=item
V2=spoon
==>
RT3->WM1
focusnext->AC1
}

operator countgoal-ignore-non-targets(activation=1.0) {
V1=item
V2<>spoon
==>
focusnext->AC1
}

operator countgoal-done(activation=1.0) {
V2=error
==>
nil->G3
}
}

define goal say-answer {
operator report-answer(activation=1.0) {
WM2=done
==>
say->AC1
WM1->AC2
stop->G1
}
}

define screen start {

  ( placemat one
   ( item fork)
   ( item fork)
   ( item plate)
   ( item knife)
   ( item spoon))
  ( placemat two
   ( item fork)
   ( item plate)
   ( item knife)
   ( item spoon)
   ( item spoon))
}
start-screen = start

