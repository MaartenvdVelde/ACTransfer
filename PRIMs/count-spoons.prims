// Count the total number of spoons on two placemats
//

define task count-spoons {
    initial-goals: (count-all say-answer)
    goals: (countgoal)
    task-constants: (item spoon placemat)
    imaginal-autoclear: nil
    start-screen: start
    rt: -2.0
    lf: 0.3
    ans: 0.1
    default-activation: 1.0
}

define facts {
    (cf0 count-fact zero one)
    (cf1 count-fact  one  two)
    (cf2 count-fact  two  three)
    (cf3  count-fact  three  four)
    (cf4  count-fact  four  five)
    (cf5  count-fact  five  six)
}

define goal count-all {
    operator init-count-all {
        WM1=nil
        V1=placemat
        ==>
        focusdown->AC1
        countgoal->G3
    }

    operator count-all-next-container {
        V1=item
        V2=error
        ==>
        focusup->AC1
    }

    operator count-all-focus-down-next-container {
        WM1<>nil
        V1=placemat
        V2<>error
        ==>
        focusdown->AC1
        countgoal->G3
    }

    operator count-all-done {
        V1=placemat
        V2=error
        ==>
        done->WM2
        nil->G1
    }
}

define goal countgoal {
    operator init-countgoal {
        WM1=nil
        ==>
        zero->WM1
    }

    operator countgoal-retrieve {
        V1=item
        V2=spoon
        RT1=nil
        ==>
        WM1->RT2
    count-fact->RT1
    }

    operator countgoal-add-count {
        V1=item
        V2=spoon
        ==>
        RT3->WM1
        focusnext->AC1
    }

    operator countgoal-ignore-non-targets {
        V1=item
        V2<>spoon
        ==>
        focusnext->AC1
    }

    operator countgoal-done {
        V2=error
        ==>
        nil->G3
    }
}

define goal say-answer {
    operator report-answer {
        WM2=done
        ==>
        say->AC1
        WM1->AC2
        stop->G1
    }
}

define screen start {

  ( placemat one
   ( item fork)
   ( item fork)
   ( item plate)
   ( item knife)
   ( item spoon))
  ( placemat two
   ( item fork)
   ( item plate)
   ( item knife)
   ( item spoon)
   ( item spoon))
}

define goal-action {
(say three)
}

