// Count the total number of spoons on two placemats
//

define task count-spoons {
    initial-goals: (count-all)
    goals: (countgoal)
    task-constants: (item spoon placemat)
    imaginal-autoclear: nil
    rt: -2.0
    lf: 0.3
    ans: 0.1
    default-activation: 1.0
}

define facts {
    (cf0 count-fact zero one)
    (cf1 count-fact  one  two)
    (cf2 count-fact  two  three)
    (cf3  count-fact  three  four)
    (cf4  count-fact  four  five)
    (cf5  count-fact  five  six)
}

define goal count-all {
    operator init-count-all {
        WM1=nil
        V1=container
        ==>
        focus-down->AC1
        countgoal->G2
    }

    operator count-all-next-container {
        V1=item-type
        V2=error
        ==>
        focus-up->AC1
    }

    operator count-all-focus-down-next-container {
        WM1<>nil
        V1=container
        V2<>error
        ==>
        focus-down->AC1
        count-subtask->G3
    }

    operator count-all-done {
        V1=container
        V2=error
        ==>
        action -> AC1
        WM1 -> AC2
        nil->G1
    }
}

define goal countgoal {
    operator init-countgoal {
        WM1=nil
        ==>
        start-number->WM1
    }

    operator countgoal-retrieve {
        V1=item-type
        V2=target
        RT1=nil
        ==>
        WM1->RT2
        fact-type->RT1
    }

    operator countgoal-add-count {
        V1=item-type
        V2=target
        ==>
        RT3->WM1
        focus-next->AC1
    }

    operator countgoal-ignore-non-targets {
        V1=item-type
        V2<>target
        ==>
        focus-next->AC1
    }

    operator countgoal-done {
        V2=error
        ==>
        nil->G2
    }
}


define script {
    screen(["placemat","one",
                ["item","fork"],
                ["item","fork"],
                ["item","plate"],
                ["item","knife"],
                ["item","spoon"]],
            ["placemat","two",
                ["item","fork"],
                ["item","plate"],
                ["item","knife"],
                ["item","spoon"],
                ["item","spoon"]])
    run-until-action("say")
    set-goal("count-all", ["container", "placemat"], ["item-type", "item"], ["count-subtask", "countgoal"],["action", "say"])
    set-goal("countgoal", ["start-number","zero"],["item-type", "item"], ["target","spoon"],["fact-type","count-fact"])

    issue-reward()
    trial-end()
}
