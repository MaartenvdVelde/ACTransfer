define task zbrodoff {
goals: (countletters answerzbrodoff)
initial-goals: (retrievezbrodoff)
task-constants: (zbrodoff letter-fact count-fact answerzbrodoff countletters)
start-screen: trial
lf: 0.5
rt: 1.2
ans: 0.05
ol: nil
imaginal-autoclear: nil
alpha: 0.1
production-prim-latency: 0.2
say-latency: 0.5
default-activation: 2.0
}

define goal retrievezbrodoff {

operator try-retrieve {
    RT1=nil
==>
    zbrodoff->RT1
    V1->RT2
    V2->RT3
}

operator retrieve-success {
    RT1=zbrodoff
==>
    RT1->WM1
    RT2->WM2
    RT3->WM3
    RT4->WM4
    answerzbrodoff->G1
}

operator retrieve-fail {
    RT1=error
==>
    countletters->G1
    nil->WM1
}

}

define goal countletters {

operator initialize {
   WM1=nil
==>
  zbrodoff->WM1
  V1->WM2
  zero->WM3
  V1->WM4
  letter-fact->RT1
  V1->RT2
}

operator letter-to-number {
  WM4=RT2
==>
  RT3->WM4
  count-fact->RT1
  WM3->RT2
}

operator number-to-letter {
  WM3=RT2
  RT3<>V2
==>
  RT3->WM3
  letter-fact->RT1
  WM4->RT2
}

operator count-done-match {
    WM3=RT2
    RT3=V2
==>
   RT3->WM3
    answerzbrodoff->G1
}

operator count-quit-on-failure {
   RT1=error
==>
   nil->WM1
   answerzbrodoff->G1
}

}

define goal answerzbrodoff {
operator answer-yes{
    V3=WM4
==>
   say->AC1
   yes->AC2
   stop->G1
}

operator answer-no{
V3<>WM4
==>
say->AC1
no->AC2
stop->G1
}
}

define facts {

(cf0 count-fact  zero  one)
(cf1 count-fact  one  two)
(cf2 count-fact  two  three)
(cf3  count-fact  three  four)
(cf4  count-fact  four  five)
(cf5  count-fact  five  six)
(a1 letter-fact a b)
(b1 letter-fact b c)
(c1 letter-fact c d)
(d1 letter-fact d e)
(e1 letter-fact e f)
(f1 letter-fact f g)
(g1 letter-fact g h)
(h1 letter-fact h i)
(i1 letter-fact i j)
(j1 letter-fact j k)
(k1 letter-fact k l)

}

define screen trial {
(?0 ?1 ?2)
}



define inputs {
(a two c yes)
(b three e yes)
(c four g yes)
(a two d no)
(b three f no)
(c four h no)
(d two f yes)
(e three h yes)
(f four j yes)
(d two g no)
(e three i no)
(f four k no)
}

define goal-action {
(say ?3)
}

