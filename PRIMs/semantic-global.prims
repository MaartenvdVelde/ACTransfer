// This version of semantic uses all global constants so that operators can be transfered more easily to counting


define task semantic-global {
initial-goals: (semantic)
task-constants: (property subvocalize say yes no)
start-screen: start
imaginal-autoclear: nil
default-activation: 1.0
ol: t
rt: -2.0
lf: 0.2
default-operator-self-assoc: 0.0
}

define goal semantic {
operator start-semantic {
"Start semantic reasoning"
V1 <> nil
WM1 = nil
==>
V1 -> WM1
property -> RT1
V1 -> RT2
subvocalize -> AC1
V1 -> AC2
}

operator move-up-tree {
"Move up the tree"
RT2 = WM1
V2 <> WM1
==>
RT3 -> WM1
property -> RT1
RT3 -> RT2
subvocalize -> AC1
RT3 -> AC2
}

operator say-yes {
"Say yes when found"
V2 = WM1
==>
say -> AC1
yes -> AC2
stop -> G1
}

operator say-no {
"Say no on retrieval failure"
V2 <> WM1
RT1 = error
==>
say -> AC1
no -> AC2
stop -> G1
}
}

define facts {
(sem1  property  lion  mammal)
(sem2  property  mammal  animal)
(sem3  property  animal  livingthing)
(sem4  property  plant  livingthing)
(sem5  property  tulip plant)
(sem6  property  bird animal)
(sem7  property  tweety bird)
(sem8  property  robin bird)
}

define action subvocalize {
    latency: 0.2
    noise: 0.08
    distribution: uniform
    output: Subvocalizing
}

define action say {
    latency: 0.3
    noise: 0.1
    distribution: uniform
    output: Saying
}



define screen start {
(?0 ?1)
}

define goal-action {
(say ?2)
}

define inputs {
(lion livingthing yes)
(tulip animal no)
(mammal livingthing yes)
(lion plant no)

}

