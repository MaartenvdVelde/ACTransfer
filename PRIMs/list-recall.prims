define task list-recall {
  initial-goals: (read-in-memory rehearse report-vocal )
  goals: (be-lazy)
  task-constants: ( letter list say)
  imaginal-autoclear: t
  rt: -2.0
  default-activation: 1.0
}

define goal read-in-memory {
  operator read-first-letter  {
  "Read the first letter and put it in WM. Store goal id in WM"
    WM1=nil
    V1=letter
    ==>
   V2->WM3
   list->WM1
   G0->WM2
   nil->V1
  }

  operator read-next-letter {
  "Read the next letter, store it in WM"
    WM1<>nil
    V1=letter
    ==>
    V2->WM3
    list->WM1
    WM0->WM2
    nil->V1
  }
}

define goal report-vocal {
  operator start-report {
  "Retrieve the first item and bump anything remaining in WM to DM"
    V1=report
    RT1=nil
    ==>
    G0->RT2
    report->WM1
  }

  operator report-item {
  "Say item and retrieve next"
    V1=report
    ==>
    RT3->AC2
    say->AC1
    RT0->RT2
  }

  operator done-report {
  "On retrieval error end report"
    V1=report
    RT1=error
==>
    stop->G1
    say -> AC1
    stop -> AC2
  }
}



define goal be-lazy {
  operator rehearse-no-rehearse {
    V1=nil
    ==>
    wait->AC1
  }
}

define facts {
 (a a)
 (b b)
 (c c)
 (d d)
 (e e)
 (f f)
 (g g)
 (h h)
 (i i)
 (j j)
}

define script {
    spans = [3, 4, 5, 6]
    letters = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]
    i = 0
    while (i < 4) {
        print("Testing span",spans[i])
        j = 0
        while (j < spans[i]) {
            screen("letter",letters[random(10)])
            run-relative-time(2.0)
            j = j + 1
        }
        screen("report")
        run-until-action("say", "stop")
        issue-reward()
        trial-end()
        i = i + 1
    }
}


