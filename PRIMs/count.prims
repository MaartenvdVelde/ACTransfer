// First example model: counting
// Adapted from the ACT-R tutorial by Niels Taatgen

define task count {
  initial-goals: (count) // In this example the task and the goal are the same
  imaginal-autoclear: nil 
  default-activation: 1.0 // All chunks defined in this model receive a fixed baselevel activation of 1.0
  ol: t
  rt: -2.0
  lf: 0.2
  default-operator-self-assoc: 0.0
  egs: 0.05
  retrieval-reinforces: t
}

define goal count {
  operator start-count {
  "Start counting"
   V1 <> nil  // There has to be a visual input with the starting number
   WM1 = nil  // Imaginal should be empty
  ==>
   V1 -> WM1 // Copy the start number to working memory
   count-fact -> RT1 // Start retrieving the next number
   V1 -> RT2
   say -> AC1 // Say the current number
   V1 -> AC2
   }

  operator iterate {
    "Iterate as long as count isn't done"
    RT2 = WM1
    V2 <> WM1
   ==>
    RT3 -> WM1
    count-fact -> RT1
    RT3 -> RT2
    say -> AC1
    RT3 ->AC2
  }

  operator final {
    "Stop when reaching final number"
    V2 = WM1
   ==>
    say -> AC1
 //   stop -> AC2
    nil -> V2
    stop -> G1
  }

}


define action say {
  latency: 0.3
  noise: 0.1
  distribution: uniform
  output: Saying
}

define init-script {
    print("Init script: Adding count-facts to memory")
    digits = ["one","two","three","four","five","six","seven",
    "eight","nine","ten"]
    for i in 0 to 8 {
        name = random-string("count-fact")
        add-dm(name, "count-fact", digits[i], digits[i + 1])
        set-activation(name, 1.0)
    }
}


define script {
    digits = ["one","two","three","four","five","six","seven",
        "eight","nine","ten"]
    start = random(3)
    end = start + 1 + random(3)
    print("Counting from",digits[start],"to",digits[end])
    screen(digits[start],digits[end])
    run-until-action("say","stop")
    issue-reward()
    trial-end()
}
