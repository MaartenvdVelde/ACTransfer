define task semantic {
initial-goals: (semantic)
start-screen: start
imaginal-autoclear: nil
ol: t
rt: -2.0
lf: 0.2
default-operator-self-assoc: 0.0
}

define goal semantic {
operator start-semantic(activation= 1.0) {
"Start semantic reasoning"
V1<>nil
WM1=nil
==>
V1->WM1
property->RT1
V1->RT2
subvocalize->AC1
V1->AC2
}

operator move-up-tree(activation=1.0) {
"Move up the tree"
RT2=WM1
V2<>WM1
==>
RT3->WM1
property->RT1
RT3->RT2
subvocalize->AC1
RT3->AC2
}

operator say-yes(activation=1.0) {
"Say yes when found"
V2=WM1
==>
stop->G1
say->AC1
yes->AC2
}

operator say-no(activation=1.0) {
"Say no on retrieval failure"
V2<>WM1
RT1=error
==>
stop->G1
say->AC1
no->AC2
}
}

define facts {
(sem1  property  lion  mammal :activation 1.0)
(sem2  property  mammal  animal :activation 1.0)
(sem3  property  animal  livingthing :activation 1.0)
(sem4  property  plant  livingthing :activation 1.0)
(sem5  property  tulip plant :activation 1.0)
}

define screen start {
(?0 ?1)
}

define inputs {
(lion livingthing)
(tulip animal)
(mammal livingthing)
(lion plant)
(
}


start-screen = start
