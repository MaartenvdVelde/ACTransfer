;;; Model to read a list and then recall it
;;;


(set-task list-recall-s)
(set-goal read-in-memory rehearse report-vocal)
(set-goal-constants letter list)

(sgp :imaginal-autoclear t :ol t :rt -2.0 :lf 0.3)


(add-dm
(read-first-letter
  isa operator
  slot1 read
  condition WM1=nil;V1=GC1
action V2->WM3;GC2->WM1;G0->WM2;C1->AC1;nil->V1
:activation 1.0
:assoc read-in-memory)

(read-next-letter
  isa operator
  slot1 read
condition WM1<>nil;V1=GC1
action V2->WM3;GC2->WM1;WM0->WM2;C1->AC1;nil->V1
:activation 1.0
:assoc read-in-memory)

(start-report
  isa operator
  slot1 report
condition V1=C1;RT1=nil
action G0->RT2;C1->WM1
:activation 1.0
:assoc report-vocal)

(report-item
  isa operator
  slot1 report
  slot2 say
condition V1=C1
action RT3->AC2;C2->AC1;RT0->RT2
:activation 1.0
:assoc report-vocal)

(done-report
  isa operator
  slot1 report
  slot2 error
  slot3 stop
  condition V1=C1;RT1=C2
  action C3->G1
:activation 1.0
:assoc report-vocal)


(rehearse-no-rehearse
  isa operator
  slot1 wait
  condition V1=nil
  action C1->AC1
:activation 1.0
:assoc rehearse)

)

(screen letter-1
(card card
(i1 letter x)))

(screen letter-2
(card card
(i2 letter k)))

(screen letter-3
(card card
(i3 letter p)))

(screen letter-4
(card card
(i4 letter f)))

(screen report
(card card
(i5 report)))

(screen report2
(card card
(i6 report test)
))

(transition letter-1 letter-2 absolute-time 2.0)
(transition letter-2 letter-3 absolute-time 4.0)
(transition letter-3 letter-4 absolute-time 6.0)
(transition letter-4 report absolute-time 8.0)
(transition report report2 action say)

(start-screen letter-1)
